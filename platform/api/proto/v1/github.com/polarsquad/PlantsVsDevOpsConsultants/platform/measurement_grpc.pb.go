// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MeasurementServiceClient is the client API for MeasurementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasurementServiceClient interface {
	Create(ctx context.Context, in *CreateMeasurementRequest, opts ...grpc.CallOption) (*CreateMeasurementResponse, error)
}

type measurementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasurementServiceClient(cc grpc.ClientConnInterface) MeasurementServiceClient {
	return &measurementServiceClient{cc}
}

func (c *measurementServiceClient) Create(ctx context.Context, in *CreateMeasurementRequest, opts ...grpc.CallOption) (*CreateMeasurementResponse, error) {
	out := new(CreateMeasurementResponse)
	err := c.cc.Invoke(ctx, "/v1.MeasurementService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasurementServiceServer is the server API for MeasurementService service.
// All implementations must embed UnimplementedMeasurementServiceServer
// for forward compatibility
type MeasurementServiceServer interface {
	Create(context.Context, *CreateMeasurementRequest) (*CreateMeasurementResponse, error)
	mustEmbedUnimplementedMeasurementServiceServer()
}

// UnimplementedMeasurementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeasurementServiceServer struct {
}

func (UnimplementedMeasurementServiceServer) Create(context.Context, *CreateMeasurementRequest) (*CreateMeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMeasurementServiceServer) mustEmbedUnimplementedMeasurementServiceServer() {}

// UnsafeMeasurementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasurementServiceServer will
// result in compilation errors.
type UnsafeMeasurementServiceServer interface {
	mustEmbedUnimplementedMeasurementServiceServer()
}

func RegisterMeasurementServiceServer(s grpc.ServiceRegistrar, srv MeasurementServiceServer) {
	s.RegisterService(&_MeasurementService_serviceDesc, srv)
}

func _MeasurementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeasurementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasurementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MeasurementService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasurementServiceServer).Create(ctx, req.(*CreateMeasurementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeasurementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MeasurementService",
	HandlerType: (*MeasurementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MeasurementService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "measurement.proto",
}
